// Generated by gencpp from file dogm_msgs/GridCell.msg
// DO NOT EDIT!


#ifndef DOGM_MSGS_MESSAGE_GRIDCELL_H
#define DOGM_MSGS_MESSAGE_GRIDCELL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dogm_msgs
{
template <class ContainerAllocator>
struct GridCell_
{
  typedef GridCell_<ContainerAllocator> Type;

  GridCell_()
    : free_mass(0.0)
    , occ_mass(0.0)
    , mean_x_vel(0.0)
    , mean_y_vel(0.0)
    , var_x_vel(0.0)
    , var_y_vel(0.0)
    , covar_xy_vel(0.0)  {
    }
  GridCell_(const ContainerAllocator& _alloc)
    : free_mass(0.0)
    , occ_mass(0.0)
    , mean_x_vel(0.0)
    , mean_y_vel(0.0)
    , var_x_vel(0.0)
    , var_y_vel(0.0)
    , covar_xy_vel(0.0)  {
  (void)_alloc;
    }



   typedef float _free_mass_type;
  _free_mass_type free_mass;

   typedef float _occ_mass_type;
  _occ_mass_type occ_mass;

   typedef float _mean_x_vel_type;
  _mean_x_vel_type mean_x_vel;

   typedef float _mean_y_vel_type;
  _mean_y_vel_type mean_y_vel;

   typedef float _var_x_vel_type;
  _var_x_vel_type var_x_vel;

   typedef float _var_y_vel_type;
  _var_y_vel_type var_y_vel;

   typedef float _covar_xy_vel_type;
  _covar_xy_vel_type covar_xy_vel;





  typedef boost::shared_ptr< ::dogm_msgs::GridCell_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dogm_msgs::GridCell_<ContainerAllocator> const> ConstPtr;

}; // struct GridCell_

typedef ::dogm_msgs::GridCell_<std::allocator<void> > GridCell;

typedef boost::shared_ptr< ::dogm_msgs::GridCell > GridCellPtr;
typedef boost::shared_ptr< ::dogm_msgs::GridCell const> GridCellConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dogm_msgs::GridCell_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dogm_msgs::GridCell_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dogm_msgs::GridCell_<ContainerAllocator1> & lhs, const ::dogm_msgs::GridCell_<ContainerAllocator2> & rhs)
{
  return lhs.free_mass == rhs.free_mass &&
    lhs.occ_mass == rhs.occ_mass &&
    lhs.mean_x_vel == rhs.mean_x_vel &&
    lhs.mean_y_vel == rhs.mean_y_vel &&
    lhs.var_x_vel == rhs.var_x_vel &&
    lhs.var_y_vel == rhs.var_y_vel &&
    lhs.covar_xy_vel == rhs.covar_xy_vel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dogm_msgs::GridCell_<ContainerAllocator1> & lhs, const ::dogm_msgs::GridCell_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dogm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dogm_msgs::GridCell_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dogm_msgs::GridCell_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dogm_msgs::GridCell_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dogm_msgs::GridCell_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dogm_msgs::GridCell_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dogm_msgs::GridCell_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dogm_msgs::GridCell_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aeedeb952081429bea02cba959265ec9";
  }

  static const char* value(const ::dogm_msgs::GridCell_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaeedeb952081429bULL;
  static const uint64_t static_value2 = 0xea02cba959265ec9ULL;
};

template<class ContainerAllocator>
struct DataType< ::dogm_msgs::GridCell_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dogm_msgs/GridCell";
  }

  static const char* value(const ::dogm_msgs::GridCell_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dogm_msgs::GridCell_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Free mass\n"
"float32 free_mass\n"
"\n"
"# Occupied mass\n"
"float32 occ_mass\n"
"\n"
"# Mean velocity in x direction\n"
"float32 mean_x_vel\n"
"\n"
"# Mean velocity in y direction\n"
"float32 mean_y_vel\n"
"\n"
"# Velocity variance in x direction\n"
"float32 var_x_vel\n"
"\n"
"# Velocity variance in y direction\n"
"float32 var_y_vel\n"
"\n"
"# Covariance of x and y\n"
"float32 covar_xy_vel\n"
;
  }

  static const char* value(const ::dogm_msgs::GridCell_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dogm_msgs::GridCell_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.free_mass);
      stream.next(m.occ_mass);
      stream.next(m.mean_x_vel);
      stream.next(m.mean_y_vel);
      stream.next(m.var_x_vel);
      stream.next(m.var_y_vel);
      stream.next(m.covar_xy_vel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GridCell_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dogm_msgs::GridCell_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dogm_msgs::GridCell_<ContainerAllocator>& v)
  {
    s << indent << "free_mass: ";
    Printer<float>::stream(s, indent + "  ", v.free_mass);
    s << indent << "occ_mass: ";
    Printer<float>::stream(s, indent + "  ", v.occ_mass);
    s << indent << "mean_x_vel: ";
    Printer<float>::stream(s, indent + "  ", v.mean_x_vel);
    s << indent << "mean_y_vel: ";
    Printer<float>::stream(s, indent + "  ", v.mean_y_vel);
    s << indent << "var_x_vel: ";
    Printer<float>::stream(s, indent + "  ", v.var_x_vel);
    s << indent << "var_y_vel: ";
    Printer<float>::stream(s, indent + "  ", v.var_y_vel);
    s << indent << "covar_xy_vel: ";
    Printer<float>::stream(s, indent + "  ", v.covar_xy_vel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DOGM_MSGS_MESSAGE_GRIDCELL_H
